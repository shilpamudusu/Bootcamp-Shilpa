{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/Desktop/crud-t3-ex/level-3-latest/src/utils/api.ts"],"sourcesContent":["/**\n * This is the client-side entrypoint for your tRPC API. It is used to create the `api` object which\n * contains the Next.js App-wrapper, as well as your type-safe React Query hooks.\n *\n * We also create a few inference helpers for input and output types.\n */\nimport { httpBatchLink, loggerLink } from \"@trpc/client\";\nimport { createTRPCNext } from \"@trpc/next\";\nimport { type inferRouterInputs, type inferRouterOutputs } from \"@trpc/server\";\nimport superjson from \"superjson\";\n\nimport { type AppRouter } from \"~/server/api/root\";\n\nconst getBaseUrl = () => {\n  if (typeof window !== \"undefined\") return \"\"; // browser should use relative url\n  if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`; // SSR should use vercel url\n  return `http://localhost:${process.env.PORT ?? 3000}`; // dev SSR should use localhost\n};\n\n/** A set of type-safe react-query hooks for your tRPC API. */\nexport const api = createTRPCNext<AppRouter>({\n  config() {\n    return {\n      /**\n       * Links used to determine request flow from client to server.\n       *\n       * @see https://trpc.io/docs/links\n       */\n      links: [\n        loggerLink({\n          enabled: (opts) =>\n            process.env.NODE_ENV === \"development\" ||\n            (opts.direction === \"down\" && opts.result instanceof Error),\n        }),\n        httpBatchLink({\n          /**\n           * Transformer used for data de-serialization from the server.\n           *\n           * @see https://trpc.io/docs/data-transformers\n           */\n          transformer: superjson,\n          url: `${getBaseUrl()}/api/trpc`,\n        }),\n      ],\n    };\n  },\n  /**\n   * Whether tRPC should await queries when server rendering pages.\n   *\n   * @see https://trpc.io/docs/nextjs#ssr-boolean-default-false\n   */\n  ssr: false,\n  transformer: superjson,\n});\n\n/**\n * Inference helper for inputs.\n *\n * @example type HelloInput = RouterInputs['example']['hello']\n */\nexport type RouterInputs = inferRouterInputs<AppRouter>;\n\n/**\n * Inference helper for outputs.\n *\n * @example type HelloOutput = RouterOutputs['example']['hello']\n */\nexport type RouterOutputs = inferRouterOutputs<AppRouter>;"],"names":[],"mappings":"AAAA;;;;;CAKC;;;AACD;AACA;AAEA;;;;;;;;;;AAIA,MAAM,aAAa;IACjB,uCAAmC;;IAAS,EAAE,kCAAkC;IAChF,IAAI,QAAQ,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,EAAE,QAAQ,GAAG,CAAC,UAAU,EAAE,EAAE,4BAA4B;IACpG,OAAO,CAAC,iBAAiB,EAAE,QAAQ,GAAG,CAAC,IAAI,IAAI,MAAM,EAAE,+BAA+B;AACxF;AAGO,MAAM,MAAM,CAAA,GAAA,4HAAA,CAAA,iBAAc,AAAD,EAAa;IAC3C;QACE,OAAO;YACL;;;;OAIC,GACD,OAAO;gBACL,CAAA,GAAA,gIAAA,CAAA,aAAU,AAAD,EAAE;oBACT,SAAS,CAAC,OACR,oDAAyB,iBACxB,KAAK,SAAS,KAAK,UAAU,KAAK,MAAM,YAAY;gBACzD;gBACA,CAAA,GAAA,gIAAA,CAAA,gBAAa,AAAD,EAAE;oBACZ;;;;WAIC,GACD,aAAa,kHAAA,CAAA,UAAS;oBACtB,KAAK,GAAG,aAAa,SAAS,CAAC;gBACjC;aACD;QACH;IACF;IACA;;;;GAIC,GACD,KAAK;IACL,aAAa,kHAAA,CAAA,UAAS;AACxB"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/DELL/Desktop/crud-t3-ex/level-3-latest/src/pages/_app.tsx"],"sourcesContent":["import { GeistSans } from \"geist/font/sans\";\nimport { type AppType } from \"next/app\";\n\nimport { api } from \"~/utils/api\";\n\nimport \"~/styles/globals.css\";\n\nconst MyApp: AppType = ({ Component, pageProps }) => {\n  return (\n    <div className={GeistSans.className}>\n      <Component {...pageProps} />\n    </div>\n  );\n};\n\nexport default api.withTRPC(MyApp);"],"names":[],"mappings":";;;;AAAA;AAGA;AAHA;;;;;;;;;AAOA,MAAM,QAAiB,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE;IAC9C,qBACE,qKAAC;QAAI,WAAW,oLAAA,CAAA,YAAS,CAAC,SAAS;kBACjC,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B;uCAEe,4GAAA,CAAA,MAAG,CAAC,QAAQ,CAAC"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}